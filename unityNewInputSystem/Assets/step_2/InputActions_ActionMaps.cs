//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/step_2/InputActions_ActionMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions_ActionMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions_ActionMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions_ActionMaps"",
    ""maps"": [
        {
            ""name"": ""ActionMapsSlimeA"",
            ""id"": ""9df34f5f-2d14-489a-bc18-5bac68c520b2"",
            ""actions"": [
                {
                    ""name"": ""DoMoveForwardAxis"",
                    ""type"": ""Value"",
                    ""id"": ""666a7c9e-9fbf-4799-80c4-cff314b9c296"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoMoveRotate"",
                    ""type"": ""Value"",
                    ""id"": ""52ca88c6-1ef1-4873-8687-1907fdf29585"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoFire"",
                    ""type"": ""Button"",
                    ""id"": ""e89f1e45-c02b-439b-a4bc-06cdfbf153ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""15173b2b-1abc-4ee3-a0da-20316ca0f6ec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""592c0ec5-6532-4fd6-82ae-43360511900f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""58968f0c-2004-4f60-9467-20c6f001d674"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""DA"",
                    ""id"": ""ac68323c-9f56-42cf-910b-bae65eba702f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""300c932b-e96f-44cd-8e26-fb496bff4711"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4b9809ae-ecd4-494d-aac2-731860a82ae6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""079c45a7-0fac-4d20-8a10-3c38fcc45511"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ActionMapsSlimeB"",
            ""id"": ""7533d422-76db-4e89-a372-2b048eb0c8dc"",
            ""actions"": [
                {
                    ""name"": ""DoMoveForwardAxis"",
                    ""type"": ""Value"",
                    ""id"": ""f3363144-cdc9-451b-a556-2a7d5a0b32c4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoMoveRotate"",
                    ""type"": ""Value"",
                    ""id"": ""8dfaaebd-e065-4fc4-90fb-19f4df5b95dc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoFire"",
                    ""type"": ""Button"",
                    ""id"": ""c592fcbd-5d60-4800-9a1c-07b62c6bef17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""OL"",
                    ""id"": ""ab056424-5542-4ee5-a02c-a74d9b808819"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0e6a29dc-4972-4c09-bee5-79941704c6b5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e74c23d3-fff0-41c2-a31a-8454b321f49d"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""DA"",
                    ""id"": ""f035caa6-3569-42a2-828c-c9afbe357932"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9a604b54-c3c0-458d-978a-18ac0d29f2f8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2146258a-3fa4-4eda-bccc-9e79d9e09682"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d42d3f41-fc55-4c3d-b7e8-bc1a0fe803dc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMapsSlimeA
        m_ActionMapsSlimeA = asset.FindActionMap("ActionMapsSlimeA", throwIfNotFound: true);
        m_ActionMapsSlimeA_DoMoveForwardAxis = m_ActionMapsSlimeA.FindAction("DoMoveForwardAxis", throwIfNotFound: true);
        m_ActionMapsSlimeA_DoMoveRotate = m_ActionMapsSlimeA.FindAction("DoMoveRotate", throwIfNotFound: true);
        m_ActionMapsSlimeA_DoFire = m_ActionMapsSlimeA.FindAction("DoFire", throwIfNotFound: true);
        // ActionMapsSlimeB
        m_ActionMapsSlimeB = asset.FindActionMap("ActionMapsSlimeB", throwIfNotFound: true);
        m_ActionMapsSlimeB_DoMoveForwardAxis = m_ActionMapsSlimeB.FindAction("DoMoveForwardAxis", throwIfNotFound: true);
        m_ActionMapsSlimeB_DoMoveRotate = m_ActionMapsSlimeB.FindAction("DoMoveRotate", throwIfNotFound: true);
        m_ActionMapsSlimeB_DoFire = m_ActionMapsSlimeB.FindAction("DoFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMapsSlimeA
    private readonly InputActionMap m_ActionMapsSlimeA;
    private List<IActionMapsSlimeAActions> m_ActionMapsSlimeAActionsCallbackInterfaces = new List<IActionMapsSlimeAActions>();
    private readonly InputAction m_ActionMapsSlimeA_DoMoveForwardAxis;
    private readonly InputAction m_ActionMapsSlimeA_DoMoveRotate;
    private readonly InputAction m_ActionMapsSlimeA_DoFire;
    public struct ActionMapsSlimeAActions
    {
        private @InputActions_ActionMaps m_Wrapper;
        public ActionMapsSlimeAActions(@InputActions_ActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoMoveForwardAxis => m_Wrapper.m_ActionMapsSlimeA_DoMoveForwardAxis;
        public InputAction @DoMoveRotate => m_Wrapper.m_ActionMapsSlimeA_DoMoveRotate;
        public InputAction @DoFire => m_Wrapper.m_ActionMapsSlimeA_DoFire;
        public InputActionMap Get() { return m_Wrapper.m_ActionMapsSlimeA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapsSlimeAActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapsSlimeAActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapsSlimeAActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapsSlimeAActionsCallbackInterfaces.Add(instance);
            @DoMoveForwardAxis.started += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled += instance.OnDoMoveForwardAxis;
            @DoMoveRotate.started += instance.OnDoMoveRotate;
            @DoMoveRotate.performed += instance.OnDoMoveRotate;
            @DoMoveRotate.canceled += instance.OnDoMoveRotate;
            @DoFire.started += instance.OnDoFire;
            @DoFire.performed += instance.OnDoFire;
            @DoFire.canceled += instance.OnDoFire;
        }

        private void UnregisterCallbacks(IActionMapsSlimeAActions instance)
        {
            @DoMoveForwardAxis.started -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled -= instance.OnDoMoveForwardAxis;
            @DoMoveRotate.started -= instance.OnDoMoveRotate;
            @DoMoveRotate.performed -= instance.OnDoMoveRotate;
            @DoMoveRotate.canceled -= instance.OnDoMoveRotate;
            @DoFire.started -= instance.OnDoFire;
            @DoFire.performed -= instance.OnDoFire;
            @DoFire.canceled -= instance.OnDoFire;
        }

        public void RemoveCallbacks(IActionMapsSlimeAActions instance)
        {
            if (m_Wrapper.m_ActionMapsSlimeAActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapsSlimeAActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapsSlimeAActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapsSlimeAActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapsSlimeAActions @ActionMapsSlimeA => new ActionMapsSlimeAActions(this);

    // ActionMapsSlimeB
    private readonly InputActionMap m_ActionMapsSlimeB;
    private List<IActionMapsSlimeBActions> m_ActionMapsSlimeBActionsCallbackInterfaces = new List<IActionMapsSlimeBActions>();
    private readonly InputAction m_ActionMapsSlimeB_DoMoveForwardAxis;
    private readonly InputAction m_ActionMapsSlimeB_DoMoveRotate;
    private readonly InputAction m_ActionMapsSlimeB_DoFire;
    public struct ActionMapsSlimeBActions
    {
        private @InputActions_ActionMaps m_Wrapper;
        public ActionMapsSlimeBActions(@InputActions_ActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoMoveForwardAxis => m_Wrapper.m_ActionMapsSlimeB_DoMoveForwardAxis;
        public InputAction @DoMoveRotate => m_Wrapper.m_ActionMapsSlimeB_DoMoveRotate;
        public InputAction @DoFire => m_Wrapper.m_ActionMapsSlimeB_DoFire;
        public InputActionMap Get() { return m_Wrapper.m_ActionMapsSlimeB; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapsSlimeBActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapsSlimeBActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapsSlimeBActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapsSlimeBActionsCallbackInterfaces.Add(instance);
            @DoMoveForwardAxis.started += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled += instance.OnDoMoveForwardAxis;
            @DoMoveRotate.started += instance.OnDoMoveRotate;
            @DoMoveRotate.performed += instance.OnDoMoveRotate;
            @DoMoveRotate.canceled += instance.OnDoMoveRotate;
            @DoFire.started += instance.OnDoFire;
            @DoFire.performed += instance.OnDoFire;
            @DoFire.canceled += instance.OnDoFire;
        }

        private void UnregisterCallbacks(IActionMapsSlimeBActions instance)
        {
            @DoMoveForwardAxis.started -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled -= instance.OnDoMoveForwardAxis;
            @DoMoveRotate.started -= instance.OnDoMoveRotate;
            @DoMoveRotate.performed -= instance.OnDoMoveRotate;
            @DoMoveRotate.canceled -= instance.OnDoMoveRotate;
            @DoFire.started -= instance.OnDoFire;
            @DoFire.performed -= instance.OnDoFire;
            @DoFire.canceled -= instance.OnDoFire;
        }

        public void RemoveCallbacks(IActionMapsSlimeBActions instance)
        {
            if (m_Wrapper.m_ActionMapsSlimeBActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapsSlimeBActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapsSlimeBActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapsSlimeBActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapsSlimeBActions @ActionMapsSlimeB => new ActionMapsSlimeBActions(this);
    public interface IActionMapsSlimeAActions
    {
        void OnDoMoveForwardAxis(InputAction.CallbackContext context);
        void OnDoMoveRotate(InputAction.CallbackContext context);
        void OnDoFire(InputAction.CallbackContext context);
    }
    public interface IActionMapsSlimeBActions
    {
        void OnDoMoveForwardAxis(InputAction.CallbackContext context);
        void OnDoMoveRotate(InputAction.CallbackContext context);
        void OnDoFire(InputAction.CallbackContext context);
    }
}
